#ifndef __PPM_VERSION_H__
#define __PPM_VERSION_H__ 1
#include <exception>

namespace ppm {
    namespace version {
        namespace exception {
            class generic : public std::exception
            {
                public:
                    virtual const char * what() const throw();
            };

            class invalid_character : public generic
            {
                private:
                    int c;
                public:
                    invalid_character(int c);

                    virtual const char * what() const throw();
            };
        }
        namespace character {
            // is a valid buildsep byte (`+`)
            bool is_build_separator(int c);

            // is a valid relsep byte (`-`)
            bool is_release_separator(int c);

            // is a valid epoch separator byte (`:`)
            bool is_epoch_separator(int c);

            // is a valid punctuation byte (`,` `;` `_` `.` `~`)
            bool is_punctuation(int c);

            // is an alphabetic byte (`a` - `z`)
            bool is_alphabetic(int c);

            // is a numeric byte (`0` - `9`)
            bool is_numeric(int c);

            // is an alphanumeric byte
            bool is_alphanumeric(int c);

            // is a valid version byte (it matches spec for one of the above)
            bool is_valid(int c);

        }
        class token
        {
            public:
                typedef enum {
                    BUILD_SEPARATOR,
                    RELEASE_SEPARATOR,
                    PUNCTUATION,
                    ALPHABETIC,
                    ALHPANUMERIC
                } token_type;
                token(const std::string & token_string);
                token_type type() const;
                const std::string & str() const;
            private:
                std::string token;
        };
        std::forward_list<token> tokenize(const std::string & ver);
        class string {
            private:
                std::forward_list<token> tokens;
                int version_compare(

            public:
                string(const std::string & version_string);
                bool operator == (const string & other);
                bool operator <= (const string & other);
                bool operator 
        }
}

#endif
